"""Classes to define Restaurant Info

Hierachy of Classes:
- Restaurant Info: Object
    - Unique Id: UUID
    - Restaurant Name: str
    - Location: Object
        - Coordinate: Object
        - Address: Object
    - OpeningHours: Object
    - Food Categories: Optional[Set[str]]
    - MenuURL: Optional[HttpUrl]
    - Services: List[str]                  # TODO: Figure out generate
    - Safety Measures: List[str]
    - Dining Ameneties: List[str]
    - Delivery Services: Object
    - Inclusive Tags: List[str]
    - Wheelchair Accessibity: List[str]
"""

from typing import Optional, Set, Dict
from uuid import UUID, uuid4

from pydantic import BaseModel, Field, HttpUrl, conset, validator

from deliver.models.utils    import to_lower_camel
from deliver.models.location import Location
from deliver.models.hours    import OpeningHours
from deliver.models.services import Services
from deliver.models.enums    import (
    FoodCategory,
    DiningAmenety,
    SafetyMeasure,
    Inclusivity,
    WheelchairAccessibity
)

AMENETY_MESSAGE = 'Ameneties only allowed when dining is available'
COVID_MESSAGE = ('Under COVID-19, safety measures are required '
                 'for dining or pickup')

class Restaurant(BaseModel):
    """Class for full restaurant info with validation

    Attributes:
        id (UUID): Unique UUID generated by default
        name (str): Restaurant Name
        location (Location):
            Data containing coordinate + address
        opening_hours (OpeningHours):
            A list of hours in the week for available services
        food_category (Set[FoodCategory]):
            A set of type of food, should be non-empty
        dining_available (bool):
            If the restaurant is available for dining
        safety_measures (Optional[Set[SafetyMeasure]]):
            A set of safety measures, required if dining available right now
        dining_ameneties (Optional[Set[DiningAmenety]]):
            A set of ameneties, optional but only if dining
        services (Services):
            A list of pickup and deliver services available
        inclusivities (Set[Inclusivity]):
            A set of inclusivity tags
        wheelchair_accessibilities (Set[WheelchairAccessibity]):
            A set of wheelchair accessibilities
    """
    id: UUID = Field(default_factory=uuid4)
    name: str
    location: Location
    opening_hours: OpeningHours = OpeningHours()
    food_categories: Set[FoodCategory] = set()
    menu_url: Optional[HttpUrl]
    dining_available: bool = False
    dining_ameneties: Optional[Set[DiningAmenety]]
    safety_measures: Optional[Set[SafetyMeasure]]
    services: Services = Services()
    inclusivities: Set[Inclusivity] = set()
    wheelchair_accessibities: Set[WheelchairAccessibity] = set()


    class Config:
        """Config for Restaurant Model

        - Must comply as typical JS/JSON variable name
        """
        alias_generator = to_lower_camel


    @validator('dining_ameneties')
    def ameneties_needs_dining(cls, val, values):
        available = values.get('dining_available', False)
        if not available and val is not None:
            raise ValueError(AMENETY_MESSAGE)
        return val

    @validator('safety_measures')
    def inddor_safety(cls, val, values):
        """Ensure if safety measures are enforced when dining or pickup
        """
        dining = values.get('dining_available', False)
        pickup = (
            values['services'].has_pickup() if 'services' in values else False)
        indoors = dining or pickup
        if indoors and not bool(val):
            raise ValueError(COVID_MESSAGE)
        return val


    def has_pickup(self) -> bool:
        """Check if the restaurant has pickup
        """
        return self.services.has_pickup()

    def has_curbside(self) -> bool:
        """Check if the restaurant has curbside pickup
        """
        return self.services.has_curbside()

    def has_delivery(self) -> bool:
        """Check if the restaurant has delivery
        """
        return self.services.has_delivery()

    def is_wheelchair_friendly(self) -> bool:
        """Return if wheelchair friendly
        """
        return bool(self.wheelchair_accessibities)


    # TODO: Test current opening w/ timezone difference
